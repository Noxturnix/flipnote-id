name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  publish:
    name: Binary ${{ matrix.target }} (on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            cross: true
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabihf
            cross: true
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            cross: false
          - os: ubuntu-latest
            target: wasm32-wasi

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - run: sudo apt install musl-tools
        if: startsWith(matrix.os, 'ubuntu') && matrix.target != 'wasm32-wasi'

      - name: cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --target=${{ matrix.target }}
          use-cross: ${{ matrix.cross }}

      - name: Set exe extension for Windows
        run: echo "EXE=.exe" >> $env:GITHUB_ENV
        if: startsWith(matrix.os, 'windows')

      - name: Set wasm extension for WASM
        run: echo "WASM=.wasm" >> $GITHUB_ENV
        if: matrix.target == 'wasm32-wasi'

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/flipnote-id${{ env.EXE }}${{ env.WASM }}

      - name: Get version from tag
        id: extract_version
        run: |
          echo ::set-output name=version::${GITHUB_REF_NAME#v}
        shell: bash

      - name: Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/release/flipnote-id${{ env.EXE }}${{ env.WASM }}
          tag: ${{ github.ref_name }}
          asset_name: flipnote-id-${{ steps.extract_version.outputs.version }}-${{ matrix.target }}${{ env.EXE }}${{ env.WASM }}
          body: v${{ steps.extract_version.outputs.version }}
        if: startsWith(github.ref_name, 'v') && github.ref_type == 'tag'
